async def callback(self, interaction: discord.Interaction):
    # Use the interaction object to send a response message containing
    # the user's favourite colour or choice. The self object refers to the
    # Select object, and the values attribute gets a list of the user's
    # selected options. We only want the first one.
    paginator = self.paginator
    child: Item = paginator[self.values[0]]
    await interaction.response.edit_message(content=await child.display())  # TODO: Finish

class Something2:
    async def _scheduled_task(self, item: Item, interaction: Interaction):
        try:
            if self.timeout:
                self.__timeout_expiry = time.monotonic() + self.timeout

            allow = await self.interaction_check(interaction)
            if not allow:
                return

            self.message_state_before_callback: discord.Message = interaction.message
            await item.callback(interaction)
            if not interaction.response._responded:
                await interaction.response.defer()
            self.message_state_after_callback: InteractionMessage = await interaction.original_message()
            await self.on_interaction(item, interaction)  # event
        except Exception as e:
            return await self.on_error(e, item, interaction)

    async def go_back_callback(self, interaction: discord.Interaction):
        # the callback for the `go back` buttons
        self.clear_items()
        for button in self.buttons:
            self.add_item(button)

        content = self.message_state_before_callback.content
        await interaction.response.edit_message(content=content, view=self)

    async def on_dropdown_select(self, item: discord.ui.Item, interaction: Interaction):
        """This is just for removing the buttons and things with the back-end.
        The front end will be handled by the self.dropdown class.
        """
        if isinstance(item, self.dropdown):
            self.clear_items()
            self.add_item(ui.BetterButton(callback=self.go_back_callback, style=ButtonStyle.grey, emoji='ðŸ”™'))
            # TODO: Improve GO BACK Emoji
            message = self.message_state_after_callback
            await message.edit(view=self)